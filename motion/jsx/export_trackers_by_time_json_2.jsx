{	var composition = app.project.activeItem;	var layers = composition.selectedLayers;	var properties = composition.selectedProperties;	var numFrames = Math.floor(composition.duration / composition.frameDuration);	var outputString = '';	buildFile();	writeFile();	function buildFile() {		if (properties.length == 0) {			alert("No properties selected.");		}		else {			exportProperties(false);		}	}	function writeFile() {		var file = new File(Folder.desktop.absoluteURI + "/" + "export.txt");		file.open("w","TEXT","????");		file.write(outputString);		file.close();		file.execute();	}	function exportProperties(isShowTime) {		var i=0;		var l=numFrames;		for (; i<l; ++i) {			var time = i * composition.frameDuration; 			output('{frame:' + i);            if (isShowTime) {               output(',time:' + time);            }             // build properties list			var x = 0;			var y = properties.length;			var source = [];			var sourceCount = 0;			var currentContainer;			for (; x<y; ++x) {				if (properties[x].valueAtTime != undefined) {					var parentName;					if (properties[x].parentProperty != undefined) {						parentName = properties[x].parentProperty.name;					}					else {						parentName = "Undefined Property";					}					if (source[parentName] == undefined) {						source[parentName] = {};						source[parentName].name = properties[x].name;						source[parentName].values = [];					}					source[parentName].values.push(properties[x]);				}			}                        for (var pn in source) {				var x = 0;				var y = source[pn].values.length;				for (; x<y; ++x) {                      output(',');					exportProperty(source[pn].values[x], time);                      				}			}			output('}');            if (i<(l-1)) {output(',');}		}	}	function exportProperty(prop, time) {		var val = prop.valueAtTime(time, true);		if (val.length > 1) {			exportMultiValue(prop, val, false);		}		else {			exportSingleValue(prop, val);		}	}		function exportSingleValue(prop, val) {        var outname = prop.name.replace(/\s+/g, '').toLowerCase();		output(outname + ':' + Math.round(val));	}		function exportMultiValue(prop, val, single) {        var outname = '';        var outname = prop.name.replace(/\s+/g, '').toLowerCase();                if (single) {            var str = outname + ': {';            var i = 0;            var l = val.length;            for (; i<l; ++i) {                str += 'value' + i + ':' + Math.round(val[i]);                 if (i<(l-1)) str+= ',';            }        	output(str);            output(' }');        }        else {            str = outname + ':' + Math.round(val[0]);            output(str);        }	}		function outputObject(obj) {		var out = "";		for (var s in obj) {			out += s + "";		}		alert(out);	}	function output(value) {		outputString += value;	}}